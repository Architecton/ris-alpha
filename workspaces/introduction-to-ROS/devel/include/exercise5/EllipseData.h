// Generated by gencpp from file exercise5/EllipseData.msg
// DO NOT EDIT!


#ifndef EXERCISE5_MESSAGE_ELLIPSEDATA_H
#define EXERCISE5_MESSAGE_ELLIPSEDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace exercise5
{
template <class ContainerAllocator>
struct EllipseData_
{
  typedef EllipseData_<ContainerAllocator> Type;

  EllipseData_()
    : found(0)
    , dpt(0.0)
    , agl(0.0)
    , timestamp(0.0)  {
    }
  EllipseData_(const ContainerAllocator& _alloc)
    : found(0)
    , dpt(0.0)
    , agl(0.0)
    , timestamp(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _found_type;
  _found_type found;

   typedef double _dpt_type;
  _dpt_type dpt;

   typedef double _agl_type;
  _agl_type agl;

   typedef double _timestamp_type;
  _timestamp_type timestamp;





  typedef boost::shared_ptr< ::exercise5::EllipseData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::exercise5::EllipseData_<ContainerAllocator> const> ConstPtr;

}; // struct EllipseData_

typedef ::exercise5::EllipseData_<std::allocator<void> > EllipseData;

typedef boost::shared_ptr< ::exercise5::EllipseData > EllipseDataPtr;
typedef boost::shared_ptr< ::exercise5::EllipseData const> EllipseDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::exercise5::EllipseData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::exercise5::EllipseData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace exercise5

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'exercise5': ['/home/dkalsan/ris-alpha/workspaces/introduction-to-ROS/src/exercise5/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::exercise5::EllipseData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::exercise5::EllipseData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::exercise5::EllipseData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::exercise5::EllipseData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exercise5::EllipseData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exercise5::EllipseData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::exercise5::EllipseData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "36c8d02dac602442e37993aa5885ef00";
  }

  static const char* value(const ::exercise5::EllipseData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x36c8d02dac602442ULL;
  static const uint64_t static_value2 = 0xe37993aa5885ef00ULL;
};

template<class ContainerAllocator>
struct DataType< ::exercise5::EllipseData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "exercise5/EllipseData";
  }

  static const char* value(const ::exercise5::EllipseData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::exercise5::EllipseData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Found flag that takes on values 1 or 0 (ellipse detected or not)\n\
uint8 found\n\
\n\
#Depth value at pixel representing the centre of the found ellipse\n\
#Contains garbage if found flag value equal to 0\n\
float64 dpt\n\
\n\
#angle_min + index_center*angle_increment\n\
float64 agl\n\
\n\
#result of rospy.Time.now().to_time() when image taken\n\
float64 timestamp\n\
";
  }

  static const char* value(const ::exercise5::EllipseData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::exercise5::EllipseData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.found);
      stream.next(m.dpt);
      stream.next(m.agl);
      stream.next(m.timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EllipseData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::exercise5::EllipseData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::exercise5::EllipseData_<ContainerAllocator>& v)
  {
    s << indent << "found: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.found);
    s << indent << "dpt: ";
    Printer<double>::stream(s, indent + "  ", v.dpt);
    s << indent << "agl: ";
    Printer<double>::stream(s, indent + "  ", v.agl);
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXERCISE5_MESSAGE_ELLIPSEDATA_H
