// Generated by gencpp from file task2/RingData.msg
// DO NOT EDIT!


#ifndef TASK2_MESSAGE_RINGDATA_H
#define TASK2_MESSAGE_RINGDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace task2
{
template <class ContainerAllocator>
struct RingData_
{
  typedef RingData_<ContainerAllocator> Type;

  RingData_()
    : center_x(0)
    , center_y(0)
    , rad(0)
    , im()  {
    }
  RingData_(const ContainerAllocator& _alloc)
    : center_x(0)
    , center_y(0)
    , rad(0)
    , im(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _center_x_type;
  _center_x_type center_x;

   typedef int32_t _center_y_type;
  _center_y_type center_y;

   typedef int32_t _rad_type;
  _rad_type rad;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _im_type;
  _im_type im;





  typedef boost::shared_ptr< ::task2::RingData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::task2::RingData_<ContainerAllocator> const> ConstPtr;

}; // struct RingData_

typedef ::task2::RingData_<std::allocator<void> > RingData;

typedef boost::shared_ptr< ::task2::RingData > RingDataPtr;
typedef boost::shared_ptr< ::task2::RingData const> RingDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::task2::RingData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::task2::RingData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace task2

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'task2': ['/home/miha/Desktop/ris-alpha/workspaces/tasks/src/task2/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::task2::RingData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::task2::RingData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::task2::RingData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::task2::RingData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::task2::RingData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::task2::RingData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::task2::RingData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b518b5d90f383e720d8073f3b71cedb3";
  }

  static const char* value(const ::task2::RingData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb518b5d90f383e72ULL;
  static const uint64_t static_value2 = 0x0d8073f3b71cedb3ULL;
};

template<class ContainerAllocator>
struct DataType< ::task2::RingData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "task2/RingData";
  }

  static const char* value(const ::task2::RingData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::task2::RingData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 center_x\n\
int32 center_y\n\
int32 rad\n\
uint8[] im\n\
";
  }

  static const char* value(const ::task2::RingData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::task2::RingData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.center_x);
      stream.next(m.center_y);
      stream.next(m.rad);
      stream.next(m.im);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RingData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::task2::RingData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::task2::RingData_<ContainerAllocator>& v)
  {
    s << indent << "center_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.center_x);
    s << indent << "center_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.center_y);
    s << indent << "rad: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rad);
    s << indent << "im[]" << std::endl;
    for (size_t i = 0; i < v.im.size(); ++i)
    {
      s << indent << "  im[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.im[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TASK2_MESSAGE_RINGDATA_H
